// Code generated by the Encore 1.50.6 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly academic: academic.ServiceClient
    public readonly grades: grades.ServiceClient
    public readonly parent: parent.ServiceClient
    public readonly queue: queue.ServiceClient
    public readonly student: student.ServiceClient
    public readonly user: user.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.academic = new academic.ServiceClient(base)
        this.grades = new grades.ServiceClient(base)
        this.parent = new parent.ServiceClient(base)
        this.queue = new queue.ServiceClient(base)
        this.student = new student.ServiceClient(base)
        this.user = new user.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getCurrentYear as api_academic_get_current_year_getCurrentYear } from "~backend/academic/get_current_year";

export namespace academic {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getCurrentYear = this.getCurrentYear.bind(this)
        }

        public async getCurrentYear(): Promise<ResponseType<typeof api_academic_get_current_year_getCurrentYear>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/academic/current`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_academic_get_current_year_getCurrentYear>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { classTimings as api_grades_class_timings_classTimings } from "~backend/grades/class_timings";
import { list as api_grades_list_list } from "~backend/grades/list";

export namespace grades {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.classTimings = this.classTimings.bind(this)
            this.list = this.list.bind(this)
        }

        public async classTimings(params: { grade: string }): Promise<ResponseType<typeof api_grades_class_timings_classTimings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/grades/${encodeURIComponent(params.grade)}/class-timings`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_grades_class_timings_classTimings>
        }

        /**
         * Static list of grades available in the school system.
         */
        public async list(): Promise<ResponseType<typeof api_grades_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/grades`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_grades_list_list>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { debug as api_parent_debug_debug } from "~backend/parent/debug";
import { getByUsername as api_parent_get_getByUsername } from "~backend/parent/get";
import {
    searchByAlternateName as api_parent_search_searchByAlternateName,
    searchByName as api_parent_search_searchByName,
    searchByPhone as api_parent_search_searchByPhone
} from "~backend/parent/search";
import { testUserUpdate as api_parent_test_user_update_testUserUpdate } from "~backend/parent/test_user_update";
import { update as api_parent_update_update } from "~backend/parent/update";

export namespace parent {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.debug = this.debug.bind(this)
            this.getByUsername = this.getByUsername.bind(this)
            this.searchByAlternateName = this.searchByAlternateName.bind(this)
            this.searchByName = this.searchByName.bind(this)
            this.searchByPhone = this.searchByPhone.bind(this)
            this.testUserUpdate = this.testUserUpdate.bind(this)
            this.update = this.update.bind(this)
        }

        /**
         * Debug endpoint to check database contents and table structure.
         */
        public async debug(params: { username: string }): Promise<ResponseType<typeof api_parent_debug_debug>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/debug/${encodeURIComponent(params.username)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_debug_debug>
        }

        /**
         * Retrieves parent information by username from parentrcd table directly.
         */
        public async getByUsername(params: { username: string }): Promise<ResponseType<typeof api_parent_get_getByUsername>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/by-username/${encodeURIComponent(params.username)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_get_getByUsername>
        }

        /**
         * Searches for parent records by alternate contact name (minimum 4 characters).
         */
        public async searchByAlternateName(params: RequestType<typeof api_parent_search_searchByAlternateName>): Promise<ResponseType<typeof api_parent_search_searchByAlternateName>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                alternateName: params.alternateName,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/search/alternate-name`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_search_searchByAlternateName>
        }

        /**
         * Searches for parent records by parent name (minimum 4 characters).
         */
        public async searchByName(params: RequestType<typeof api_parent_search_searchByName>): Promise<ResponseType<typeof api_parent_search_searchByName>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                name: params.name,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/search/name`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_search_searchByName>
        }

        /**
         * Searches for parent records by main phone number (must be exactly 10 digits).
         */
        public async searchByPhone(params: RequestType<typeof api_parent_search_searchByPhone>): Promise<ResponseType<typeof api_parent_search_searchByPhone>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                phone: params.phone,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/search/phone`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_search_searchByPhone>
        }

        /**
         * Test endpoint to verify user table update functionality.
         */
        public async testUserUpdate(params: RequestType<typeof api_parent_test_user_update_testUserUpdate>): Promise<ResponseType<typeof api_parent_test_user_update_testUserUpdate>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/test-user-update`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_test_user_update_testUserUpdate>
        }

        /**
         * Updates parent information by username.
         */
        public async update(params: RequestType<typeof api_parent_update_update>): Promise<ResponseType<typeof api_parent_update_update>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/parent/update`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_parent_update_update>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { addToDismissalQueue as api_queue_add_to_dismissal_queue_addToDismissalQueue } from "~backend/queue/add_to_dismissal_queue";
import { attendanceAndDismissalQueueCountsByGrade as api_queue_attendance_and_dismissal_queue_counts_by_grade_attendanceAndDismissalQueueCountsByGrade } from "~backend/queue/attendance_and_dismissal_queue_counts_by_grade";
import { buildNewQueue as api_queue_build_new_queue_buildNewQueue } from "~backend/queue/build_new_queue";
import { close as api_queue_close_close } from "~backend/queue/close";
import { create as api_queue_create_create } from "~backend/queue/create";
import { debugTable as api_queue_debug_table_debugTable } from "~backend/queue/debug_table";
import { deleteQueue as api_queue_delete_deleteQueue } from "~backend/queue/delete";
import { getAttendanceDismissalStatusByGrade as api_queue_get_attendance_dismissal_status_by_grade_getAttendanceDismissalStatusByGrade } from "~backend/queue/get_attendance_dismissal_status_by_grade";
import { getAttendanceDismissalStatusByParent as api_queue_get_attendance_dismissal_status_by_parent_getAttendanceDismissalStatusByParent } from "~backend/queue/get_attendance_dismissal_status_by_parent";
import { getCurrentQueue as api_queue_get_current_getCurrentQueue } from "~backend/queue/get_current";
import { getQueueCountByGrade as api_queue_get_queue_count_by_grade_getQueueCountByGrade } from "~backend/queue/get_queue_count_by_grade";
import { getQueueListByGrade as api_queue_get_queue_list_by_grade_getQueueListByGrade } from "~backend/queue/get_queue_list_by_grade";
import { list as api_queue_list_list } from "~backend/queue/list";
import { showSQL as api_queue_show_sql_showSQL } from "~backend/queue/show_sql";
import { testRawSQL as api_queue_test_raw_sql_testRawSQL } from "~backend/queue/test_raw_sql";
import { updateAttendanceStatusByQRCode as api_queue_update_attendance_status_by_qr_code_updateAttendanceStatusByQRCode } from "~backend/queue/update_attendance_status_by_qr_code";
import { updateDismissalQueueByQRScan as api_queue_update_dismissal_queue_by_qr_scan_updateDismissalQueueByQRScan } from "~backend/queue/update_dismissal_queue_by_qr_scan";
import { updateDismissalStatusByStudent as api_queue_update_dismissal_status_updateDismissalStatusByStudent } from "~backend/queue/update_dismissal_status";
import { updateDismissalStatusByParentId as api_queue_update_dismissal_status_by_parentid_updateDismissalStatusByParentId } from "~backend/queue/update_dismissal_status_by_parentid";

export namespace queue {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addToDismissalQueue = this.addToDismissalQueue.bind(this)
            this.attendanceAndDismissalQueueCountsByGrade = this.attendanceAndDismissalQueueCountsByGrade.bind(this)
            this.buildNewQueue = this.buildNewQueue.bind(this)
            this.close = this.close.bind(this)
            this.create = this.create.bind(this)
            this.debugTable = this.debugTable.bind(this)
            this.deleteQueue = this.deleteQueue.bind(this)
            this.getAttendanceDismissalStatusByGrade = this.getAttendanceDismissalStatusByGrade.bind(this)
            this.getAttendanceDismissalStatusByParent = this.getAttendanceDismissalStatusByParent.bind(this)
            this.getCurrentQueue = this.getCurrentQueue.bind(this)
            this.getQueueCountByGrade = this.getQueueCountByGrade.bind(this)
            this.getQueueListByGrade = this.getQueueListByGrade.bind(this)
            this.list = this.list.bind(this)
            this.showSQL = this.showSQL.bind(this)
            this.testRawSQL = this.testRawSQL.bind(this)
            this.updateAttendanceStatusByQRCode = this.updateAttendanceStatusByQRCode.bind(this)
            this.updateDismissalQueueByQRScan = this.updateDismissalQueueByQRScan.bind(this)
            this.updateDismissalStatusByParentId = this.updateDismissalStatusByParentId.bind(this)
            this.updateDismissalStatusByStudent = this.updateDismissalStatusByStudent.bind(this)
        }

        /**
         * Adds a new record to the dismissal queue.
         */
        public async addToDismissalQueue(params: RequestType<typeof api_queue_add_to_dismissal_queue_addToDismissalQueue>): Promise<ResponseType<typeof api_queue_add_to_dismissal_queue_addToDismissalQueue>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/add-to-dismissal-queue`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_add_to_dismissal_queue_addToDismissalQueue>
        }

        public async attendanceAndDismissalQueueCountsByGrade(params: RequestType<typeof api_queue_attendance_and_dismissal_queue_counts_by_grade_attendanceAndDismissalQueueCountsByGrade>): Promise<ResponseType<typeof api_queue_attendance_and_dismissal_queue_counts_by_grade_attendanceAndDismissalQueueCountsByGrade>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/attendance-and-dismissal-queue-counts-by-grade`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_attendance_and_dismissal_queue_counts_by_grade_attendanceAndDismissalQueueCountsByGrade>
        }

        /**
         * Calls the build_new_queue Supabase function directly
         */
        public async buildNewQueue(params: RequestType<typeof api_queue_build_new_queue_buildNewQueue>): Promise<ResponseType<typeof api_queue_build_new_queue_buildNewQueue>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/build-new-queue`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_build_new_queue_buildNewQueue>
        }

        /**
         * Closes the currently open queue using Supabase function.
         */
        public async close(params: RequestType<typeof api_queue_close_close>): Promise<ResponseType<typeof api_queue_close_close>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/close`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_close_close>
        }

        /**
         * Creates a new queue with YYYYMMDD format ID and populates dismissal queue.
         */
        public async create(params: RequestType<typeof api_queue_create_create>): Promise<ResponseType<typeof api_queue_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/create`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_create_create>
        }

        /**
         * Debug endpoint to thoroughly inspect the queuemasterrcd table
         */
        public async debugTable(): Promise<ResponseType<typeof api_queue_debug_table_debugTable>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/debug-table`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_debug_table_debugTable>
        }

        /**
         * Deletes a queue by queue ID and removes all associated dismissal queue records.
         */
        public async deleteQueue(params: RequestType<typeof api_queue_delete_deleteQueue>): Promise<ResponseType<typeof api_queue_delete_deleteQueue>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                queueId: params.queueId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/delete`, {query, method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_delete_deleteQueue>
        }

        public async getAttendanceDismissalStatusByGrade(params: RequestType<typeof api_queue_get_attendance_dismissal_status_by_grade_getAttendanceDismissalStatusByGrade>): Promise<ResponseType<typeof api_queue_get_attendance_dismissal_status_by_grade_getAttendanceDismissalStatusByGrade>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/get-attendance-dismissal-status-by-grade`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_get_attendance_dismissal_status_by_grade_getAttendanceDismissalStatusByGrade>
        }

        public async getAttendanceDismissalStatusByParent(params: RequestType<typeof api_queue_get_attendance_dismissal_status_by_parent_getAttendanceDismissalStatusByParent>): Promise<ResponseType<typeof api_queue_get_attendance_dismissal_status_by_parent_getAttendanceDismissalStatusByParent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/get-attendance-dismissal-status-by-parent`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_get_attendance_dismissal_status_by_parent_getAttendanceDismissalStatusByParent>
        }

        /**
         * Retrieves the currently open queue.
         */
        public async getCurrentQueue(): Promise<ResponseType<typeof api_queue_get_current_getCurrentQueue>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/current`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_get_current_getCurrentQueue>
        }

        /**
         * Retrieves dismissal queue status counts for a specific grade in the currently open queue.
         */
        public async getQueueCountByGrade(params: RequestType<typeof api_queue_get_queue_count_by_grade_getQueueCountByGrade>): Promise<ResponseType<typeof api_queue_get_queue_count_by_grade_getQueueCountByGrade>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                grade: params.grade,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/count-by-grade`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_get_queue_count_by_grade_getQueueCountByGrade>
        }

        /**
         * Retrieves all dismissal queue records for a specific grade in the currently open queue.
         */
        public async getQueueListByGrade(params: RequestType<typeof api_queue_get_queue_list_by_grade_getQueueListByGrade>): Promise<ResponseType<typeof api_queue_get_queue_list_by_grade_getQueueListByGrade>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                grade: params.grade,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/list-by-grade`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_get_queue_list_by_grade_getQueueListByGrade>
        }

        /**
         * Retrieves all queues ordered by creation date.
         */
        public async list(): Promise<ResponseType<typeof api_queue_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/list`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_list_list>
        }

        /**
         * Shows the actual SQL queries used by the queue operations
         */
        public async showSQL(): Promise<ResponseType<typeof api_queue_show_sql_showSQL>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/show-sql`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_show_sql_showSQL>
        }

        /**
         * Tests raw SQL queries to understand what's happening with the queuemasterrcd table
         */
        public async testRawSQL(): Promise<ResponseType<typeof api_queue_test_raw_sql_testRawSQL>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/test-raw-sql`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_test_raw_sql_testRawSQL>
        }

        public async updateAttendanceStatusByQRCode(params: RequestType<typeof api_queue_update_attendance_status_by_qr_code_updateAttendanceStatusByQRCode>): Promise<ResponseType<typeof api_queue_update_attendance_status_by_qr_code_updateAttendanceStatusByQRCode>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/update-attendance-status-by-qr-code`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_update_attendance_status_by_qr_code_updateAttendanceStatusByQRCode>
        }

        /**
         * Updates dismissal queue records based on QR scan data.
         */
        public async updateDismissalQueueByQRScan(params: RequestType<typeof api_queue_update_dismissal_queue_by_qr_scan_updateDismissalQueueByQRScan>): Promise<ResponseType<typeof api_queue_update_dismissal_queue_by_qr_scan_updateDismissalQueueByQRScan>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/update-dismissal-queue-by-qr-scan`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_update_dismissal_queue_by_qr_scan_updateDismissalQueueByQRScan>
        }

        public async updateDismissalStatusByParentId(params: RequestType<typeof api_queue_update_dismissal_status_by_parentid_updateDismissalStatusByParentId>): Promise<ResponseType<typeof api_queue_update_dismissal_status_by_parentid_updateDismissalStatusByParentId>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/update-dismissal-status-by-parentid`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_update_dismissal_status_by_parentid_updateDismissalStatusByParentId>
        }

        /**
         * Updates the dismissal queue status for a specific student in a specific queue.
         */
        public async updateDismissalStatusByStudent(params: RequestType<typeof api_queue_update_dismissal_status_updateDismissalStatusByStudent>): Promise<ResponseType<typeof api_queue_update_dismissal_status_updateDismissalStatusByStudent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/queue/update-dismissal-status`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_queue_update_dismissal_status_updateDismissalStatusByStudent>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { approveAbsenceRequest as api_student_approve_absence_request_approveAbsenceRequest } from "~backend/student/approve_absence_request";
import { debug as api_student_debug_debug } from "~backend/student/debug";
import { generateQRToken as api_student_generate_qr_token_generateQRToken } from "~backend/student/generate_qr_token";
import { getByParentID as api_student_get_by_parent_getByParentID } from "~backend/student/get_by_parent";
import { insertAbsence as api_student_insert_absence_insertAbsence } from "~backend/student/insert_absence";
import { pendingAbsenceApprovalsByGrade as api_student_pending_absence_approvals_by_grade_pendingAbsenceApprovalsByGrade } from "~backend/student/pending_absence_approvals_by_grade";
import { pendingAndApprovedAbsencesByStudent as api_student_pending_and_approved_absences_by_student_pendingAndApprovedAbsencesByStudent } from "~backend/student/pending_and_approved_absences_by_student";
import { rejectAbsenceRequest as api_student_reject_absence_request_rejectAbsenceRequest } from "~backend/student/reject_absence_request";
import {
    searchByGrade as api_student_search_searchByGrade,
    searchById as api_student_search_searchById,
    searchByName as api_student_search_searchByName
} from "~backend/student/search";
import { update as api_student_update_update } from "~backend/student/update";
import { updateStudentAttendanceStatus as api_student_update_attendance_status_by_student_updateStudentAttendanceStatus } from "~backend/student/update_attendance_status_by_student";
import { updateDismissalStatusByStudent as api_student_update_dismissal_status_by_student_updateDismissalStatusByStudent } from "~backend/student/update_dismissal_status_by_student";
import { verifyQRToken as api_student_verify_qr_token_verifyQRToken } from "~backend/student/verify_qr_token";

export namespace student {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approveAbsenceRequest = this.approveAbsenceRequest.bind(this)
            this.debug = this.debug.bind(this)
            this.generateQRToken = this.generateQRToken.bind(this)
            this.getByParentID = this.getByParentID.bind(this)
            this.insertAbsence = this.insertAbsence.bind(this)
            this.pendingAbsenceApprovalsByGrade = this.pendingAbsenceApprovalsByGrade.bind(this)
            this.pendingAndApprovedAbsencesByStudent = this.pendingAndApprovedAbsencesByStudent.bind(this)
            this.rejectAbsenceRequest = this.rejectAbsenceRequest.bind(this)
            this.searchByGrade = this.searchByGrade.bind(this)
            this.searchById = this.searchById.bind(this)
            this.searchByName = this.searchByName.bind(this)
            this.update = this.update.bind(this)
            this.updateDismissalStatusByStudent = this.updateDismissalStatusByStudent.bind(this)
            this.updateStudentAttendanceStatus = this.updateStudentAttendanceStatus.bind(this)
            this.verifyQRToken = this.verifyQRToken.bind(this)
        }

        public async approveAbsenceRequest(params: RequestType<typeof api_student_approve_absence_request_approveAbsenceRequest>): Promise<ResponseType<typeof api_student_approve_absence_request_approveAbsenceRequest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/approve-absence-request`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_approve_absence_request_approveAbsenceRequest>
        }

        /**
         * Debug endpoint to check student table contents and structure.
         */
        public async debug(params: { parentID: string }): Promise<ResponseType<typeof api_student_debug_debug>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/debug/${encodeURIComponent(params.parentID)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_debug_debug>
        }

        public async generateQRToken(params: RequestType<typeof api_student_generate_qr_token_generateQRToken>): Promise<ResponseType<typeof api_student_generate_qr_token_generateQRToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/qr/generate`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_generate_qr_token_generateQRToken>
        }

        /**
         * Retrieves all students associated with a parent ID.
         */
        public async getByParentID(params: { parentID: string }): Promise<ResponseType<typeof api_student_get_by_parent_getByParentID>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/by-parent/${encodeURIComponent(params.parentID)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_get_by_parent_getByParentID>
        }

        public async insertAbsence(params: RequestType<typeof api_student_insert_absence_insertAbsence>): Promise<ResponseType<typeof api_student_insert_absence_insertAbsence>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/insert-absence`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_insert_absence_insertAbsence>
        }

        public async pendingAbsenceApprovalsByGrade(params: RequestType<typeof api_student_pending_absence_approvals_by_grade_pendingAbsenceApprovalsByGrade>): Promise<ResponseType<typeof api_student_pending_absence_approvals_by_grade_pendingAbsenceApprovalsByGrade>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                grade: params.grade,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/pending-absence-approvals-by-grade`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_pending_absence_approvals_by_grade_pendingAbsenceApprovalsByGrade>
        }

        public async pendingAndApprovedAbsencesByStudent(params: RequestType<typeof api_student_pending_and_approved_absences_by_student_pendingAndApprovedAbsencesByStudent>): Promise<ResponseType<typeof api_student_pending_and_approved_absences_by_student_pendingAndApprovedAbsencesByStudent>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                studentid: params.studentid,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/pending-and-approved-absences-by-student`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_pending_and_approved_absences_by_student_pendingAndApprovedAbsencesByStudent>
        }

        public async rejectAbsenceRequest(params: RequestType<typeof api_student_reject_absence_request_rejectAbsenceRequest>): Promise<ResponseType<typeof api_student_reject_absence_request_rejectAbsenceRequest>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/reject-absence-request`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_reject_absence_request_rejectAbsenceRequest>
        }

        /**
         * Searches for student records by grade.
         */
        public async searchByGrade(params: RequestType<typeof api_student_search_searchByGrade>): Promise<ResponseType<typeof api_student_search_searchByGrade>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                grade: params.grade,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/search/grade`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_search_searchByGrade>
        }

        /**
         * Searches for student records by student ID (exact match).
         */
        public async searchById(params: RequestType<typeof api_student_search_searchById>): Promise<ResponseType<typeof api_student_search_searchById>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                studentId: params.studentId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/search/id`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_search_searchById>
        }

        /**
         * Searches for student records by student name (minimum 3 characters).
         */
        public async searchByName(params: RequestType<typeof api_student_search_searchByName>): Promise<ResponseType<typeof api_student_search_searchByName>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                name: params.name,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/search/name`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_search_searchByName>
        }

        /**
         * Updates student information by student ID.
         */
        public async update(params: RequestType<typeof api_student_update_update>): Promise<ResponseType<typeof api_student_update_update>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/update`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_update_update>
        }

        public async updateDismissalStatusByStudent(params: RequestType<typeof api_student_update_dismissal_status_by_student_updateDismissalStatusByStudent>): Promise<ResponseType<typeof api_student_update_dismissal_status_by_student_updateDismissalStatusByStudent>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/update-dismissal-status`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_update_dismissal_status_by_student_updateDismissalStatusByStudent>
        }

        public async updateStudentAttendanceStatus(params: RequestType<typeof api_student_update_attendance_status_by_student_updateStudentAttendanceStatus>): Promise<ResponseType<typeof api_student_update_attendance_status_by_student_updateStudentAttendanceStatus>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/update-attendance-status`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_update_attendance_status_by_student_updateStudentAttendanceStatus>
        }

        public async verifyQRToken(params: RequestType<typeof api_student_verify_qr_token_verifyQRToken>): Promise<ResponseType<typeof api_student_verify_qr_token_verifyQRToken>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/student/qr/verify`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_student_verify_qr_token_verifyQRToken>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { create as api_user_create_create } from "~backend/user/create";
import { list as api_user_list_list } from "~backend/user/list";
import { list_usersrcd as api_user_list_usersrcd_list_usersrcd } from "~backend/user/list_usersrcd";
import { login as api_user_login_login } from "~backend/user/login";
import { getProfile as api_user_profile_getProfile } from "~backend/user/profile";
import { updateAttendanceStatusByGrade as api_user_update_attendance_status_by_grade_updateAttendanceStatusByGrade } from "~backend/user/update_attendance_status_by_grade";

export namespace user {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.create = this.create.bind(this)
            this.getProfile = this.getProfile.bind(this)
            this.list = this.list.bind(this)
            this.list_usersrcd = this.list_usersrcd.bind(this)
            this.login = this.login.bind(this)
            this.updateAttendanceStatusByGrade = this.updateAttendanceStatusByGrade.bind(this)
        }

        /**
         * Creates a new user record in the database.
         */
        public async create(params: RequestType<typeof api_user_create_create>): Promise<ResponseType<typeof api_user_create_create>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/create`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_create_create>
        }

        /**
         * Retrieves user profile information by login ID.
         */
        public async getProfile(params: { loginID: string }): Promise<ResponseType<typeof api_user_profile_getProfile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/profile/${encodeURIComponent(params.loginID)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_profile_getProfile>
        }

        /**
         * Retrieves all user records from the Supabase database.
         */
        public async list(): Promise<ResponseType<typeof api_user_list_list>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/list`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_list_list>
        }

        /**
         * Retrieves all records from the usersrcd table with all fields.
         */
        public async list_usersrcd(): Promise<ResponseType<typeof api_user_list_usersrcd_list_usersrcd>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/list_usersrcd`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_list_usersrcd_list_usersrcd>
        }

        /**
         * Authenticates a user and updates their last login information.
         */
        public async login(params: RequestType<typeof api_user_login_login>): Promise<ResponseType<typeof api_user_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_login_login>
        }

        public async updateAttendanceStatusByGrade(params: RequestType<typeof api_user_update_attendance_status_by_grade_updateAttendanceStatusByGrade>): Promise<ResponseType<typeof api_user_update_attendance_status_by_grade_updateAttendanceStatusByGrade>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/user/update_attendance_status_by_grade`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_user_update_attendance_status_by_grade_updateAttendanceStatusByGrade>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.6)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
